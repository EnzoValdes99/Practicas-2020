Python 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 22:45:29) [MSC v.1916 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> from string import ascii_letters , digits
>>> from itertools import product
>>> #Concatenas letras y digitos en una sola cadena
>>> caracteres = ascii_letters+digits
>>> def buscador(con):
	
	#Archivo con todas las combinaciones generadas
		archivo = open("combinaciones.txt", "w")
		if 3<= len(con) <= 4:
			for i in range(3,5):
				for comb in product(caracteres, repeat = i):
					#Se utiliza join() para concatenar los caracteres regresado por la funcion product ():
					#Como join necesita una cadena inicial para hacer la concatenacion, se pone una cadena vacía
					#al principio
					prueba = "".join(comb)
					#Escribiendo al archivo cada combinacion generada
					archivo.write( prueba + "\n")
					if prueba == con:
						print('Tu contraseña es {}'.format(prueba))
						#Cerrando el archivo
						archivo.close()
						break
		else:
			print('Ingresa una contraseña que contenga de 3 a 4 caracteres')
				
... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 
>>> from time import time
>>> t0 = time()
>>> con = 'HOL4'
>>> buscador(con)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 4, in buscador
PermissionError: [Errno 13] Permission denied: 'combinaciones.txt'
>>> print("Tiempos de ejecución {}".format(round(time()-t0, 6)))
Tiempos de ejecución 3420.599907
>>> #Algoritmos avidos (greedy)
>>> def cambio(cantidad, denominaciones):
		resultados = []
		while (cantidad > 0):
			if (cantidad >= denominaciones[0]):
				
				num = cantidad // denominaciones[0]
				cantidad = cantidad - (num * denominaciones[0])
				resultado.append([denominaciones[0], num])
			denominaciones = denominaciones[1:]
		return resultado
... ... ... ... ... ... ... ... ... ... 
>>> #Pruebas del algoritmo
>>> print (cambio(1000, [500, 200, 100, 50, 20, 5, 1]))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 8, in cambio
NameError: name 'resultado' is not defined
>>> def cambio(cantidad, denominaciones):
		resultados = []
		while (cantidad > 0):
			if (cantidad >= denominaciones[0]):
				
				num = cantidad // denominaciones[0]
				cantidad = cantidad - (num * denominaciones[0])
				resultado.append([denominaciones[0], num])
			denominaciones = denominaciones[1:]
		return resultados
... ... ... ... ... ... ... ... ... ... 
>>> print (cambio(1000, [500, 200, 100, 50, 20, 5, 1]))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 8, in cambio
NameError: name 'resultado' is not defined
>>> def cambio(cantidad, denominaciones):
	resultado = []
	while (cantidad > 0):
		if (cantidad >= denominaciones[0]):
			
			num = cantidad // denominaciones
... ... ... ... ... ... 
>>> def cambio(cantidad, denominaciones):
		resultado = []
		while (cantidad > 0):
			if (cantidad >= denominaciones[0]):
				
				num = cantidad // denominaciones[0]
				cantidad = cantidad - (num * denominaciones[0])
				resultado.append([denominaciones[0], num])
			denominaciones = denominaciones[1:]
		return resultado
... ... ... ... ... ... ... ... ... ... 
>>> print (cambio(1000, [500, 200, 100, 50, 20, 5, 1]))
[[500, 2]]
>>> print (cambio(500, [500, 200, 100, 50, 20, 5, 1]))
[[500, 1]]
>>> print (cambio(300, [50, 20, 5, 1]))
[[50, 6]]
>>> print (cambio(200, [5]))
[[5, 40]]
>>> print (cambio(98, [50, 20, 5, 1]))
[[50, 1], [20, 2], [5, 1], [1, 3]]
>>> print (cambio(98, [5, 20, 1, 50]))
[[5, 19], [1, 3]]
>>> #Bottom-up / Programacion dinamica
>>> def fibonacci_iterativo_v1(numero):
		f1=0
		f2=1
		tmp=0
		for i in range(1, numero-1):
			tmp = f1+f2
			f1=f2
			f2=tmp
		return f2
... ... ... ... ... ... ... ... ... 
>>> fibonacci_iterativo_v1(6)
5
>>> def fibonacci_iterativo_v2(numero):
		f1=0
 		f2=1
		for i in range(1, numero-1):
			f1,f2=f2,f1+f2
		return f2
... ...   File "<stdin>", line 3
    f2=1
       ^
TabError: inconsistent use of tabs and spaces in indentation
>>>   File "<stdin>", line 1
    for i in range(1, numero-1):
    ^
IndentationError: unexpected indent
>>>   File "<stdin>", line 1
    f1,f2=f2,f1+f2
    ^
IndentationError: unexpected indent
>>>   File "<stdin>", line 1
    return f2
    ^
IndentationError: unexpected indent
>>> def fibonacci_iterativo_v2(numero):
		f1=0
		f2=1
		for i in range(1, numero-1):
			f1,f2=f2, f1+f2
		return f2
... ... ... ... ... ... 
>>> fibonacci_iterativo_v2(6)
5
>>> def fibonacci_bottom_up(numero):
		f_parciales = [0, 1, 1]
		while len(f_parciales) < numero:
			f_parciales.append(f_parciales[-1] + f_parciales[-2])
			print(f_parciales)
		return f_parciales[numero-1]
... ... ... ... ... ... 
>>> fibonacci_bottom_up(5)
[0, 1, 1, 2]
[0, 1, 1, 2, 3]
3
>>> #Top-down
>>> #Memoria inicial
>>> memoria = {1:0, 2:1, 3:1}
>>> def fibonacci_top_down(numero):
		if numero in memoria:
			return memoria[numero]
		f = fibonacci_iterativo_v2(numero-1) + fibonacci_iterativo_v2(numero-2)
		memoria[numero] = f
		return memoria[numero]
... ... ... ... ... ... 
>>> fibonacci_top_down(12)
89
>>> memoria
{1: 0, 2: 1, 3: 1, 12: 89}
>>> fibonacci_top_down(8)
13
>>> memoria
{1: 0, 2: 1, 3: 1, 12: 89, 8: 13}
>>> #Se carga la biblioteca
>>> import pickle
>>> #guardar variable
>>> #No hay restriccion en lo que se pone como ext del archivo,
>>> #generalmente se usa .p o .pickle como estandar
>>> archivo = open('memoria.p', 'wb')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
PermissionError: [Errno 13] Permission denied: 'memoria.p'
>>> pickle.dump('memoria.p', 'rb')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: file must have a 'write' attribute
>>> archivo.close()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'archivo' is not defined
>>> archivo = open('memoria.p', 'rb')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
FileNotFoundError: [Errno 2] No such file or directory: 'memoria.p'
>>> #Se carga la biblioteca