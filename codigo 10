Python 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 22:45:29) [MSC v.1916 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> #Estructuras de control selectivas
>>> def obtenerMayor(param1, param2):
		if param1 < param2:
			print('{} es mayor que {}'.format(param2, param1))
... ... ... 
>>> obtenerMayor(5, 7)
7 es mayor que 5
>>> obtenerMayor(7, 5) #No imprime nada
>>> x = y = z = 3
>>> if x == y == z:
		print(true)
... ... 
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
NameError: name 'true' is not defined
>>> x = y = z = 3
>>> if x == y == z :
		print(True)
... ... 
True
>>> #If-else
>>> def obtenerMayorv2(param1, param2):
		if param1 <param2:
			return param2
		else:
			return param1
... ... ... ... ... 
>>> print("El mayor es {}".format(obtenerMayorv2(4,20)))
El mayor es 20
>>> print("El mayor es {}".format(obtenerMayorv2(11, 6)))
El mayor es 11
>>> #Comparaciones
>>> def obtenerMayor_idiom(param1, param2):
		#la variable valor va a tener el valor de param2 si el if es verdadero, de lo contrario tendra el valor de param1
... ... valor = param2 if (param1< param2) else param1
	return valor

  File "<stdin>", line 3
    valor = param2 if (param1< param2) else param1
    ^
IndentationError: expected an indented block
>>>   File "<stdin>", line 1
    return valor
    ^
IndentationError: unexpected indent
>>> >>> def obtenerMayor_idiom(param1, param2):
			valor = param2 if (param1 < param2) else param1
		return valor
... ...   File "<stdin>", line 3
    return valor
               ^
IndentationError: unindent does not match any outer indentation level
>>> def obtenerMayor_idiom(param1, param2):
		valor= param2 if (param1 < param2) else param1
... ... 
>>> return valor
  File "<stdin>", line 1
SyntaxError: 'return' outside function
>>> def obtenerMayor_idiom(param1, param2):
	valor = param2 if (param1 < param2) else param1
... ... return valor
  File "<stdin>", line 3
    return valor
    ^
SyntaxError: invalid syntax
>>> def obtenerMayor_idiom(param1, param2):
		valor = param2 if (param1 < param2) else param1
	return valor
... ...   File "<stdin>", line 3
    return valor
               ^
IndentationError: unindent does not match any outer indentation level
>>> def obtenerMayor_idiom(param1, param2):
		valor = param2 if (param1 < param2) else param1
	return valor
... ...   File "<stdin>", line 3
    return valor
               ^
IndentationError: unindent does not match any outer indentation level
>>> def obtenerMayor_idiom(param1, param2):
	valor = param2 if (param1 < param2)
					else param1
		return valor
...   File "<stdin>", line 2
    valor = param2 if (param1 < param2)
                                      ^
SyntaxError: invalid syntax
>>>   File "<stdin>", line 1
    else param1
    ^
IndentationError: unexpected indent
>>>   File "<stdin>", line 1
    return valor
    ^
IndentationError: unexpected indent
>>> def obtenerMayor_idiom(param1, param2):
	valor = param2 if (param1 < param2) else param1
	return valor

... ... ... >>> print ("El mayor es {}".format(obtenerMayor_idiom(11, 6)))
El mayor es 11
>>> #If-elif-else

>>> >>> def numeros(num):
		if num==1:
			print ("Tu numero es 1")
		elif num==2:
			print("Tu numero es 2")
		elif num==3:
			print("el numero es 3")
		elif num==4:
			print("el numero es 4")
		else:
			print("No hay opcion")
... ... ... ... ... ... ... ... ... ... ... 
>>> numeros(2)
Tu numero es 2
>>> numeros(6)
No hay opcion
>>> #Evitar la repeticion de codigo del if-elif-else
>>> def numeros_idiom(num):
		if num in (1,2,3,4):
			print("Tu numero es {}".format(num))
		else:
			print("{} no es una opcion".format(num))
... ... ... ... ... 
>>> numeros_idiom(2)
Tu numero es 2
>>> numeros_idiom(5)
5 no es una opcion
>>> #Estructura de control selectiva anidada
>>> def obtenerMasGrande(a, b, c):
		if a > b:
			if a > c:
				return a
			else:
				return c
		else:
			if b > c:
				return b
			else:
				return c 
... ... ... ... ... ... ... ... ... ... ... 
>>> print("El mas grande es {}".format(obtenerMasGrande(7,13,1)))
El mas grande es 13
>>> #Estructuras de control repetitivas
>>> #While
>>> def cuenta(limite):
		i = limite
		while True:
			print (1)
			i = i - 1
			if i == 0:
				break
... ... ... ... ... ... ... 
>>> cuenta(10)
1
1
1
1
1
1
1
1
1
1
>>> def cuenta(limite):
		i = limite
		while True:
			print(i)
			i = i - 1
			if i == 0:
				break
... ... ... ... ... ... ... 
>>> cuenta(10)
10
9
8
7
6
5
4
3
2
1
>>> def factorial(n):
		i = 2
		tmp = 1
		while i < n+1:
			tmp = tmp * i
			i = i + 1
		return tmp